(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./app/main.js":[function(require,module,exports){
"use strict";

var React = require("react");
var MissionCommanderApp = require("./CommanderApp.js");
var IndexApp = require("./IndexApp.js");
var ScienceTeamApp = require("./ScienceApp.js");
var CommunicationTeamApp = require("./CommunicationApp.js");
var Router = require("./router.js");
//var document = require('global/document');
var window = require("global/window");
var location = window.location;
var appDiv = document.querySelector("body");

Router.config({ mode: "hash" }).add(/start/, function () {
    React.render(React.createElement(IndexApp, null), appDiv);
}).add(/commander/, function () {
    React.render(React.createElement(MissionCommanderApp, null), appDiv);
}).add(/science/, function () {
    React.render(React.createElement(ScienceTeamApp, null), appDiv);
}).add(/communication/, function () {
    React.render(React.createElement(CommunicationTeamApp, null), appDiv);
})
// default
.add(function () {
    console.log("No route configured for this url");
    Router.navigate("/start");
}).listen()
// make sure we start at one of the defined routes above
.check(location.href.substr(location.origin.length));

console.log("Routes set up");

window.Router = Router;


},{"./CommanderApp.js":"/Users/carl-erik.kopseng/Dropbox/Skole/master/Emissions/app/CommanderApp.js","./CommunicationApp.js":"/Users/carl-erik.kopseng/Dropbox/Skole/master/Emissions/app/CommunicationApp.js","./IndexApp.js":"/Users/carl-erik.kopseng/Dropbox/Skole/master/Emissions/app/IndexApp.js","./ScienceApp.js":"/Users/carl-erik.kopseng/Dropbox/Skole/master/Emissions/app/ScienceApp.js","./router.js":"/Users/carl-erik.kopseng/Dropbox/Skole/master/Emissions/app/router.js","global/window":"/Users/carl-erik.kopseng/Dropbox/Skole/master/Emissions/node_modules/global/window.js","react":"react"}],"/Users/carl-erik.kopseng/Dropbox/Skole/master/Emissions/app/CommanderApp.js":[function(require,module,exports){
"use strict";

var React = require("react");

var App = React.createClass({
    displayName: "App",

    render: function render() {
        return React.createElement("div", null, React.createElement("p", { id: "missionTime" }, "Oppdraget har ikke startet"), React.createElement("div", null, "Oppdragstid:", React.createElement("input", { type: "text", id: "missionLength", size: "3" }), "minutter", React.createElement("button", { id: "changeMissionTime", style: { display: "none" } }, "Endre oppdragstid"), React.createElement("button", { id: "startMission" }, "Start oppdrag")), React.createElement("button", { id: "jobFinished", style: { display: "none" } }, "Oppdrag utført"), React.createElement("div", null, React.createElement("video", { id: "astronautVideo", width: "270px", height: "180px", autoPlay: "true", loop: "true", controls: "true", muted: "true" }, React.createElement("source", { type: "video/webm" }))), React.createElement("div", null, React.createElement("button", { id: "stopButton" }, "Stopp"), React.createElement("button", { id: "astronautHappy" }, "Glad"), React.createElement("button", { id: "astronautNervous" }, "Nervøs")), React.createElement("div", null, React.createElement("button", { id: "callSecurityTeam", className: "call" }, "Ring sikkerhets-teamet"), React.createElement("br", null), React.createElement("button", { id: "callCommunicationTeam", className: "call" }, "Ring kommunikasjons-teamet"), React.createElement("span", { id: "callerId", className: "incomingCall" }, "X ringer"), React.createElement("button", { id: "answerButton", className: "incomingCall" }, "Svar"), React.createElement("button", { id: "hangUp" }, "Legg på")), React.createElement("div", null, React.createElement("video", { id: "localVideo", className: "rtcVideo", autoPlay: "true", muted: "true" }), React.createElement("video", { id: "remoteVideo", className: "rtcVideo", autoPlay: "true" })));
    }

});

module.exports = App;


},{"react":"react"}],"/Users/carl-erik.kopseng/Dropbox/Skole/master/Emissions/app/CommunicationApp.js":[function(require,module,exports){
"use strict";

var React = require("react");

var App = React.createClass({
    displayName: "App",

    render: function render() {
        return React.createElement("h1", null, "Communications Team");
    }

});

module.exports = App;


},{"react":"react"}],"/Users/carl-erik.kopseng/Dropbox/Skole/master/Emissions/app/IndexApp.js":[function(require,module,exports){
"use strict";

var React = require("react");

var App = React.createClass({
    displayName: "App",

    render: function render() {
        return React.createElement("div", null, React.createElement("h1", null, "Index"), React.createElement("a", { href: "#commander" }, "Mission commander"), React.createElement("br", null), React.createElement("a", { href: "#communication" }, "Communication team"), React.createElement("br", null), React.createElement("a", { href: "#astronaut" }, "Astronaut team"), React.createElement("br", null), React.createElement("a", { href: "#science" }, "Science team"), React.createElement("br", null), React.createElement("a", { href: "#security" }, "Security team"));
    }

});

module.exports = App;


},{"react":"react"}],"/Users/carl-erik.kopseng/Dropbox/Skole/master/Emissions/app/ScienceApp.js":[function(require,module,exports){
"use strict";

var React = require("react");

var App = React.createClass({
    displayName: "App",

    render: function render() {
        return React.createElement("h1", null, "ScienceTeam");
    }

});

module.exports = App;


},{"react":"react"}],"/Users/carl-erik.kopseng/Dropbox/Skole/master/Emissions/app/router.js":[function(require,module,exports){
"use strict";

/**
 * Minimal singleton router - good enoughfor our needs
 *
 * @see http://krasimirtsonev.com/blog/article/A-modern-JavaScript-router-in-100-lines-history-api-pushState-hash-url
 *
 * @example
 *  // configuration
 *  Router.config({ mode: 'history'});
 *
 *  // returning the user to the initial state
 *  Router.navigate();
 *
 *  // adding routes
 *  Router
 *  .add(/about/, function() {
 *     console.log('about');
 * })
 *  .add(/products\/(.*)\/edit\/(.*)/, function() {
 *     console.log('products', arguments);
 * })
 *  .add(function() {
 *     console.log('default');
 * })
 *  .check('/products/12/edit/22').listen();
 *
 *  // forwarding
 *  Router.navigate('/about');
 */
var window = require("global/window"),
    document = require("global/document"),
    mode = null,
    routes = [],
    root = "/";

function getFragment() {
    var fragment = "";
    if (mode === "history") {
        fragment = clearSlashes(decodeURI(location.pathname + location.search));
        fragment = fragment.replace(/\?(.*)$/, "");
        fragment = root != "/" ? fragment.replace(root, "") : fragment;
    } else {
        var match = window.location.href.match(/#(.*)$/);
        fragment = match ? match[1] : "";
    }
    return clearSlashes(fragment);
}

function clearSlashes(path) {
    return path.toString().replace(/\/$/, "").replace(/^\//, "");
}

var Router = {
    config: function config(options) {
        mode = options && options.mode && options.mode == "history" && !!history.pushState ? "history" : "hash";
        root = options && options.root ? "/" + clearSlashes(options.root) + "/" : "/";
        return this;
    },
    add: function add(re, handler) {
        if (typeof re == "function") {
            handler = re;
            re = "";
        }
        routes.push({ re: re, handler: handler });
        return this;
    },
    remove: function remove(param) {
        for (var i = 0, r; i < routes.length, r = routes[i]; i++) {
            if (r.handler === param || r.re.toString() === param.toString()) {
                routes.splice(i, 1);
                return this;
            }
        }
        return this;
    },
    flush: function flush() {
        routes = [];
        mode = null;
        root = "/";
        return this;
    },
    // trigger handler function if a route exists
    check: function check(f) {
        var fragment = f || getFragment();
        for (var i = 0; i < routes.length; i++) {
            var match = fragment.match(routes[i].re);
            if (match) {
                match.shift();
                routes[i].handler.apply({}, match);
                return this;
            }
        }
        return this;
    },
    // will only trigger a handler if the routing has changed
    listen: function listen() {
        var self = this;
        var current = getFragment();
        var fn = function fn() {
            if (current !== getFragment()) {
                current = getFragment();
                self.check(current);
            }
        };

        clearInterval(this.interval);
        this.interval = setInterval(fn, 50);
        return this;
    },
    navigate: function navigate(path) {
        path = path ? clearSlashes(path) : "";
        if (mode === "history") {
            history.pushState(null, null, root + clearSlashes(path));
        } else {
            window.location.href = window.location.href.replace(/#(.*)$/, "") + "#" + path.replace(/#/, "");
        }
        return this;
    }
};

module.exports = Router;


},{"global/document":"/Users/carl-erik.kopseng/Dropbox/Skole/master/Emissions/node_modules/global/document.js","global/window":"/Users/carl-erik.kopseng/Dropbox/Skole/master/Emissions/node_modules/global/window.js"}],"/Users/carl-erik.kopseng/Dropbox/Skole/master/Emissions/node_modules/browserify/node_modules/browser-resolve/empty.js":[function(require,module,exports){

},{}],"/Users/carl-erik.kopseng/Dropbox/Skole/master/Emissions/node_modules/global/document.js":[function(require,module,exports){
(function (global){
var topLevel = typeof global !== 'undefined' ? global :
    typeof window !== 'undefined' ? window : {}
var minDoc = require('min-document');

if (typeof document !== 'undefined') {
    module.exports = document;
} else {
    var doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];

    if (!doccy) {
        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
    }

    module.exports = doccy;
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"min-document":"/Users/carl-erik.kopseng/Dropbox/Skole/master/Emissions/node_modules/browserify/node_modules/browser-resolve/empty.js"}],"/Users/carl-erik.kopseng/Dropbox/Skole/master/Emissions/node_modules/global/window.js":[function(require,module,exports){
(function (global){
if (typeof window !== "undefined") {
    module.exports = window;
} else if (typeof global !== "undefined") {
    module.exports = global;
} else if (typeof self !== "undefined"){
    module.exports = self;
} else {
    module.exports = {};
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}]},{},["./app/main.js"])
//# sourceMappingURL=data:application/json;base64,
